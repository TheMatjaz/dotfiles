# -----------------------------------------------------------------------------
# Matjaž's dotfiles ZSH aliases configuration file
#
# Copyright (c) 2015-2016, Matjaž Guštin <dev@matjaz.it> matjaz.it
# This source code form is part of the "Matjaž's dotfiles" project and is 
# subject to the terms of the BSD 3-clause license as expressed in the 
# LICENSE.md file found in the top-level directory of this distribution and at
# http://directory.fsf.org/wiki/License:BSD_3Clause
# -----------------------------------------------------------------------------

# My scripts
alias markdown="perl /Applications/scripts/Markdown.pl --html4tags"
alias countcode="bash /Applications/scripts/count_lines_of_java_code.sh"
alias gh-pages="bash /Applications/scripts/javadoc_after_build_run.sh"
alias numerus="~/Development/C/Numerus/bin/numerus"


# Directories
alias dev="cd ~/Development"    
alias tmp="cd /tmp"
alias dot="cd ~/Development/Dotfiles"


# Create and enter the directory
function mkcd() {
    mkdir -p $@ && cd $_
}


# Get size of a directory or file
function size() {
    du -shck "$@" | sort -rn | awk '
        function human(x) {
            s="kMGTEPYZ";
            while (x>=1000 && length(s)>1) {
                x/=1024
                s=substr(s,2)
            }
            return int(x+0.5) substr(s,1,1)
        }
        {gsub(/^[0-9]+/, human($1)); print}'
    }


# Pretty print json
alias json='python -m json.tool'


# Top sordted by CPU usage on OS X   
alias top="top -o cpu"


# Htop run by root
alias htop="sudo htop"


# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"


# Start Emacsclient and eventually also the daemon server, if down
alias e="emacsclient -t -a ''"


# Android debugger
alias adb="/Users/matjaz/Library/Android/sdk/platform-tools/adb"


# Others
alias pip='pip3'
alias psql="'/Applications/Postgres.app/Contents/Versions/9.5/bin'/psql -p5432"
alias sqlite="sqlite3"
alias gpg="gpg2"
alias py="python3"
alias copy="pbcopy"
alias cmdc="pbcopy"
alias cmdv="pbpaste"
alias digs="dig +short"

# IP addresses
function wanip() {
    public_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
    if [ -z $public_ip ]; then
        public_ip=$(dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | sed 's/"//g')
    fi
    echo $public_ip
}
alias lanip="ipconfig getifaddr en0"
alias ipwan="wanip"
alias iplan="lanip"
function dnsserver() {
    echo "Configured DNS servers:"
    cat /etc/resolv.conf | grep nameserver | cut -d ' ' -f 2
    echo "Used DNS server:"
    dig whoami.akamai.net +short
}


# Recursively delete `.DS_Store` files from current directory
alias dscleanup="find . -type f -name '*.DS_Store' -ls -delete"


# Empty the Trash on all mounted volumes and the main HDD.
# Also, clear Apple’s System Logs to improve shell startup speed.
# Finally, clear download history from quarantine. https://mths.be/bum
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash"
alias emptylogsquarantine="sudo rm -rfv /private/var/log/asl/*.asl; sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'; sqlite3 ~/Library/Mail/V2/MailData/Envelope\ Index vacuum" 


# Open man page as PDF
function manpdf() {
    man -t "${1}" | open -f -a /Applications/Preview.app/
}


# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)  tar -jxvf "$1"                        ;;
            *.tar.gz)   tar -zxvf "$1"                        ;;
            *.bz2)      bunzip2 "$1"                          ;;
            *.dmg)      hdiutil mount "$1"                    ;;
            *.gz)       gunzip "$1"                           ;;
            *.tar)      tar -xvf "$1"                         ;;
            *.tbz2)     tar -jxvf "$1"                        ;;
            *.tgz)      tar -zxvf "$1"                        ;;
            *.zip)      unzip "$1"                            ;;
            *.ZIP)      unzip "$1"                            ;;
            *.pax)      cat "$1" | pax -r                     ;;
            *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
            *.Z)        uncompress "$1"                       ;;
            *) echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file to extract"
    fi
}


# apply zshrc, zsh_aliases and zsh_path changes
alias zshrc="source ~/.zshrc"


# Change directory to the current Finder directory
function cdfinder() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
        cd "$target"; pwd
    else
        echo 'No Finder window found' >&2
    fi
}


# Midnight commander wrapper to make it exit in its current directory
alias mc=". /usr/local/Cellar/midnight-commander/*/libexec/mc/mc-wrapper.sh"


# Call pdftk, if installed, to compress a PDF file passing through postscript
function pdfcompress() {
    which pdf2ps 2>&1 > /dev/null
    if [ $? = 0 ]; then
        filename=$1
        filename=${filename%.*}
        echo -n "pdf -> ps"
        pdf2ps "$filename.pdf" "/tmp/$filename.ps"
        echo -n " -> pdf compressed"
        ps2pdf /tmp/$filename.ps $filename\ compressed.pdf
        echo "   Done!"
        rm "/tmp/$filename.ps"
    else
        echo "PdfTK not installed. Cannot use pdf2ps and ps2pdf."
    fi
}


# Wget download until completed (for slow/unstable connections)
alias wget-infinite="wget --tries=0 --retry-connrefused --continue --timeout=30 --random-wait --background --append-output=/tmp/wget_background"
alias wget-infinite-status="tail -2 /tmp/wget_background | head -1"


# Add a list of files to gitignore if not already there
function gitignore() {
    if [ -d ".git" ]; then
        # Create file if not exists or update modification time
        touch .gitignore
        if [[ $# == 0 ]]; then
            cat .gitignore
        else 
            while [[ $# > 0 ]]; do
                # If the file is not already in .gitignore, then append it
                grep -q "$1" ".gitignore" || echo "$1" >> ".gitignore"
                # Go to next command line parameter
                shift
            done
        fi
    else
        echo "This is not a git repository. Nothing done."
    fi
}


# Awesome terminal commands fot weather forecast
# Parameter one ($1) = the city to lookup
function weather() {
    if [ -z $1 ] ; then
        echo "Usage: weather <name-of-the-city>"
    else
        { curl -s http://wttr.in/$1 ; finger $1@graph.no } | less
    fi
}

# Thanks to: http://zanshin.net/2012/08/01/my-zsh-setup-for-python-virtualenv/
# Activates a Python virtual enviroment and dectivates its automatic prompt
# Once activated, run `deactivate` to put it off.
function activate() {
    if [ -z $1 ] ; then
        echo "Usage: activate <name of the virtual enviroment>"
    else
        source ./$1/bin/activate
    fi
}

# Update pip and all its packages
function pipupdate() {
    which pip3 2>&1 > /dev/null
    if [ $? = 0 ]; then  # if pip exists
        echo "$prompt Updating pip3 itself. May ask for root password."
        sudo -H pip3 install --upgrade pip
        if [[ -z $(pip3 freeze --local) ]]; then
            echo "$prompt No pip packages installed so far."
        else
            echo "$prompt Updating all pip3 packages."
            pip3 freeze --local \
                | grep -v '^\-e' \
                | cut -d = -f 1  \
                | xargs -n1 sudo -H pip3 install --upgrade
        fi
    else
        echo "$prompt Missing pip3, skipping."
    fi
}

# HTTP serve current directory as static content
alias httpserve='open http://localhost:8000 && python -m SimpleHTTPServer'


# ISO `date` format for BSD `date`
# 2016-07-26T18:48:28+0200
function isodate() {
    if [[ $1 == "-:" ]] ; then
        date +%Y-%m-%dT%H:%M:%S%z
    else
        date +%Y-%m-%dT%H:%M:%S%z | sed -E 's/(..)$/:\1/'
    fi
}

# Print current unix time when no args are passed or convert any passed args
# from ISO date to unix time or the other way around, depending on the args'
# format. Any other format of the arguments is rejected.
function unixtime() {
    if [[ $# == 0 ]]; then
        date +%s
    else
        while [[ $# > 0 ]]; do
            if [[ $1 =~ ^-?[0-9]+$ ]]; then
                # is an integer, thus a Unix time. Let's convert it to ISO
                date -r $1 +%Y-%m-%dT%H:%M:%S%z
            elif [[ $1 =~ "^[0-9]{4}-[0-9]{2}-[0-9]{2}(T| )[0-9]{2}:[0-9]{2}:[0-9]{2}\+[0-9]{2}:?[0-9]{2}$" ]]; then
                # is an ISO date. Let's convert it to Unix time.
                date_without_timezone_colon=$(echo $1 | sed -E 's/:(..)$/\1/')
                date -j -f %Y-%m-%dT%H:%M:%S%z $date_without_timezone_colon +%s
            else
                # do nothing when format is different
            fi
            shift
        done
    fi
}


# Remaining traffic on LTE mobile internet
function traffic() {
    if [[ $1 == '--integer' ]]; then
        output=$(curl -s -H 'Connection: close' 'https://matjaz.it/3ffic.php?cli&int')
    else
        output=$(curl -s -H 'Connection: close' 'https://matjaz.it/3ffic.php?cli')
    fi
    echo $output
}


# List filetypes in this directory recursively
alias filetypes="find . -type f -not -iwholename '*.git*' | sed -E 's/^.*\.([^\.]+)/\1/' | sort | uniq"

# Create thumbnails of PNG files in this folder
alias thumbnailize="mkdir -p thumbnails; find . -maxdepth 1 \( -iname \*.png -o -iname \*.jpg \) -exec convert "{}" -scale 600x "thumbnails/{}" \;"

# Get as much information about a file as possible
function information() {
    ls -l $1
    file $1
    stat $1
    identify --verbose $1   
}

# Custom run of Hugo with some fixes and cleanups
function myhugo() {
    # Check if the directory is right
    if [[ ! -d "content" || ! -d "static" ]]; then
        echo "This is not a Hugo root directory. Nothing done."
        return 1
    fi

    # Fix lastmod date of the human sitemap page
    cd content/page
    sed -i'.sedbackup' -E 's/"[0-9]{4}-[0-9]{2}-[0-9]{2}T.*"/"'$(isodate)'"/' sitemap.md
    rm sitemap.md.sedbackup
    cd ../..

    # Cleanup previous build and rebuild
    rm -rf public
    hugo
    
    # Remove any .DS_store files
    dscleanup
}

